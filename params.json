{"name":"331 a3","tagline":"","body":"SOEN 331 : Introduction to Formal Methods for Software Engineering\r\nAssignment 3  : Extended Finite State Machines\r\n\r\n\r\nNote: Provide a diagram for each part of this assignment. It is advised you make copies of the diagrams as you renew them, to retain a history. You are required to provide all diagrams of each step. Therefore 5 diagrams. If you do not provide these diagrams, you will be penalized.\r\n\r\n\r\nPart I: Overall EFSM\r\n\r\n\r\n\r\nPart II: Refine init\r\n\r\n\r\n\r\nPart III: Refine monitor\r\n\r\n\r\n\r\nPart IV: Refine lockdown\r\n\r\n\r\n\r\n\r\nPart V: Refine error diagnosis (robust error handling)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nPart VI: Simulating your machine\r\n\r\n1. is_loop(Event, Guard) succeeds by nding a loop edge. We assume that an edge\r\ncan be represented by a non-null event-guard pair.\r\n\r\n2. all_loops(Set) succeeds by returning a set of all loop edges.\r\n\r\n3. is_edge(Event, Guard) succeeds by nding an edge.\r\n\r\n4. size(Length) succeeds by returning the size of the entire EFSM (given by the number\r\nof its edges).\r\n\r\n5. is_link(Event, Guard) succeeds by nding a link edge.\r\n\r\n6. Rule all_superstates(Set) succeeds by nding all superstates in the EFSM.\r\n\r\n7. ancestor(Ancestor, Descendant) is a utility rule that succeeds by returning an an-\r\ncestor to a given state.\r\n\r\n8. inheritss_transitions(State, List) succeeds by returning all transitions inherited\r\nby a given state.\r\n\r\n9. all_states(L) succeeds by returning a list of all states.\r\n\r\n10. all_init_states(L) succeeds by returning a list of all starting states.\r\n\r\n11. get_starting_state(State) succeeds by returning the top-level starting state.\r\n\r\n12. state_is_reflexive(State) succeeds is State is reflexive.\r\n\r\n13. graph_is_reflexive succeeds if the entire EFSM is reflexive.\r\n\r\n14. get_guards(Ret) succeeds by returning a set of all guards.\r\n15. get_events(Ret) succeeds by returning a set of all events.\r\n16. get_actions(Ret) succeeds by returning a set of all actions.\r\n17. get_only_guarded(Ret) succeeds by returning state pairs that are associated by guards\r\nonly.\r\n18. legal_events_of(State, L) succeeds by returning all legal event-guard pairs.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}